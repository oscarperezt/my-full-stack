name: Deploy to Staging

on:
  push:
    branches:
      - master

jobs:
  deploy:
    # Do not deploy in the main repository, only in user projects
    if: github.repository_owner != 'fastapi'
    runs-on:
      - self-hosted
      - staging
    env:
      ENVIRONMENT: staging
      DOMAIN: ${{ secrets.DOMAIN_STAGING }}
      STACK_NAME: ${{ secrets.STACK_NAME_STAGING }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      FIRST_SUPERUSER: ${{ secrets.FIRST_SUPERUSER }}
      FIRST_SUPERUSER_PASSWORD: ${{ secrets.FIRST_SUPERUSER_PASSWORD }}
      SMTP_HOST: ${{ secrets.SMTP_HOST }}
      SMTP_USER: ${{ secrets.SMTP_USER }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      EMAILS_FROM_EMAIL: ${{ secrets.EMAILS_FROM_EMAIL }}
      TIMESCALE_PASSWORD: ${{ secrets.TIMESCALE_PASSWORD }}
      SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      FRONTEND_HOST: ${{ secrets.FRONTEND_HOST }}
      BACKEND_CORS_ORIGINS: ${{ secrets.BACKEND_CORS_ORIGINS }}
      TIMESCALE_SERVER: ${{ secrets.TIMESCALE_SERVER }}
      TIMESCALE_PORT: ${{ secrets.TIMESCALE_PORT }}
      TIMESCALE_DB: ${{ secrets.TIMESCALE_DB }}
      TIMESCALE_USER: ${{ secrets.TIMESCALE_USER }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create .env file from GitHub Secrets
        run: |
          echo "DOMAIN=localhost" > .env
          echo "BACKEND_CORS_ORIGINS=${{ secrets.BACKEND_CORS_ORIGINS }}" >> .env
          echo "FRONTEND_HOST=${{ secrets.FRONTEND_HOST }}" >> .env
          echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
          echo "STACK_NAME=${{ secrets.STACK_NAME_STAGING }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "FIRST_SUPERUSER=${{ secrets.FIRST_SUPERUSER }}" >> .env
          echo "FIRST_SUPERUSER_PASSWORD=${{ secrets.FIRST_SUPERUSER_PASSWORD }}" >> .env
          echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "EMAILS_FROM_EMAIL=${{ secrets.EMAILS_FROM_EMAIL }}" >> .env
          echo "TIMESCALE_SERVER=${{ secrets.TIMESCALE_SERVER }}" >> .env
          echo "TIMESCALE_PORT=${{ secrets.TIMESCALE_PORT }}" >> .env
          echo "TIMESCALE_DB=${{ secrets.TIMESCALE_DB }}" >> .env
          echo "TIMESCALE_USER=${{ secrets.TIMESCALE_USER }}" >> .env
          echo "TIMESCALE_PASSWORD=${{ secrets.TIMESCALE_PASSWORD }}" >> .env
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env
          echo "DOCKER_IMAGE_BACKEND=${{ secrets.DOCKER_IMAGE_BACKEND }}" >> .env
          echo "DOCKER_IMAGE_FRONTEND=${{ secrets.DOCKER_IMAGE_FRONTEND }}" >> .env
      - run: |
          if [ "$(docker ps -q)" ]; then
            docker stop $(docker ps -q);
          else
            echo "No containers are running.";
          fi
      - run: |
          if [ "$(docker ps -a -q)" ]; then
            docker rm $(docker ps -a -q);
          else
            echo "No containers to remove.";
          fi
      - run: docker compose down -v --remove-orphans
      - run: docker compose -f docker-compose.yml --project-name ${{ secrets.STACK_NAME_STAGING }} build
      - run: docker compose -f docker-compose.yml --project-name ${{ secrets.STACK_NAME_STAGING }} up -d
